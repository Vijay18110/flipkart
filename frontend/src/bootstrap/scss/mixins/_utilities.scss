// Utility generator
// Used to generate utilities & print utilities
@mixin generate-utility($utility, $infix: "", $is-rfs-media-query: false) {
  $values: map-get($utility, values);

  // If the values are a list or string, convert it into a map
  @if type-of($values)=="string" or type-of(nth($values, 1)) !="list" {
    $values: zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map-get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties)=="string" {
      $properties: append((), $properties);
    }

    // Use custom className if present
    $property-className: if(map-has-key($utility, className), map-get($utility, className), nth($properties, 1));
    $property-className: if($property-className ==null, "", $property-className);

    // Use custom CSS variable name if present, otherwise default to `className`
    $css-variable-name: if(map-has-key($utility, css-variable-name), map-get($utility, css-variable-name), map-get($utility, className));

    // State params to generate pseudo-classNamees
    $state: if(map-has-key($utility, state), map-get($utility, state), ());

    $infix: if($property-className =="" and str-slice($infix, 1, 1)=="-", str-slice($infix, 2), $infix);

    // Don't prefix if value key is null (e.g. with shadow className)
    $property-className-modifier: if($key, if($property-className =="" and $infix =="", "", "-") + $key, "");

    @if map-get($utility, rfs) {

      // Inside the media query
      @if $is-rfs-media-query {
        $val: rfs-value($value);

        // Do not render anything if fluid and non fluid values are the same
        $value: if($val ==rfs-fluid-value($value), null, $val);
      }

      @else {
        $value: rfs-fluid-value($value);
      }
    }

    $is-css-var: map-get($utility, css-var);
    $is-local-vars: map-get($utility, local-vars);
    $is-rtl: map-get($utility, rtl);

    @if $value !=null {
      @if $is-rtl ==false {
        /* rtl:begin:remove */
      }

      @if $is-css-var {
        .#{$property-className + $infix + $property-className-modifier} {
          --#{$prefix}#{$css-variable-name}: #{$value};
        }

        @each $pseudo in $state {
          .#{$property-className + $infix + $property-className-modifier}-#{$pseudo}:#{$pseudo} {
            --#{$prefix}#{$css-variable-name}: #{$value};
          }
        }
      }

      @else {
        .#{$property-className + $infix + $property-className-modifier} {
          @each $property in $properties {
            @if $is-local-vars {
              @each $local-var, $variable in $is-local-vars {
                --#{$prefix}#{$local-var}: #{$variable};
              }
            }

            #{$property}: $value if($enable-important-utilities, !important, null);
          }
        }

        @each $pseudo in $state {
          .#{$property-className + $infix + $property-className-modifier}-#{$pseudo}:#{$pseudo} {
            @each $property in $properties {
              @if $is-local-vars {
                @each $local-var, $variable in $is-local-vars {
                  --#{$prefix}#{$local-var}: #{$variable};
                }
              }

              #{$property}: $value if($enable-important-utilities, !important, null);
            }
          }
        }
      }

      @if $is-rtl ==false {
        /* rtl:end:remove */
      }
    }
  }
}